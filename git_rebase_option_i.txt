# コマンド:
# p, pick <commit> = commit を使用
# r, reword <commit> = commit を使用しますが、commit メッセージを編集します
# e, edit <commit> = コミットを使用しますが、修正のために停止します
# s, squash <commit> = コミットを使用しますが、前のコミットに融合します
# f、フィックスアップ [-C | -c] <commit> = 「スカッシュ」に似ていますが、以前のもののみを保持します
# -C が使用されていない限り、コミットのログ メッセージ。
# このコミットのメッセージのみを保持します。 -c は -C と同じですが、
# エディタを開く
# x, exec <command> = シェルを使用してコマンド (行の残り) を実行
# b, break = ここで停止 ('git rebase --continue' で後でリベースを続行)
# d, drop <commit> = コミットを削除
# l, label <label> = 現在の HEAD に名前を付ける
# t, reset <label> = HEAD をラベルにリセット
# m, マージ [-C <コミット> | -c <コミット>] <ラベル> [# <ワンライン>]
# .元のマージ コミットを使用してマージ コミットを作成する
# .メッセージ (または、元のマージ コミットがない場合は、1 行)
# .指定）; -c <commit> を使用して、コミット メッセージを言い換えます
#
# これらの行は並べ替えることができます。それらは上から下に実行されます。
#
# ここで行を削除すると、コミットが失われます。
#
# ただし、すべてを削除すると、リベースは中止されます。
#